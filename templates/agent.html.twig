{% extends 'base.html.twig' %}

{% block javascripts %}
    {{ parent() }}

    <script type="application/javascript">
        window.addEventListener('load', event => {
            const automationCheckbox = document.getElementById('automation');
            let automation = 0;

            if (automationCheckbox) {
                automation = Number(localStorage.getItem('automation') || 0);

                automationCheckbox.checked = automation === 1;

                automationCheckbox.addEventListener('change', event => {
                    localStorage.setItem('automation', event.target.checked === true ? 1 : 0);
                    window.location.reload();
                });
            }

            const cooldownElement = document.querySelector('[data-cooldown]');

            if (cooldownElement) {
                let intervalHandle;

                intervalHandle = setInterval(() => {
                    let openingParantheses = cooldownElement.innerText.indexOf('(');
                    let closingParantheses = cooldownElement.innerText.indexOf(')');

                    let currentValue = Number(cooldownElement.innerText.substring(openingParantheses + 1, closingParantheses - 1));
                    if (currentValue <= 1) {
                        clearInterval(intervalHandle);
                    }

                    let newText = cooldownElement.innerText.replace(currentValue + 's', (currentValue - 1) + 's');

                    cooldownElement.innerText = newText;
                }, 1000);
            }

            if (automation === 1) {
                const cooldown = Number(cooldownElement?.dataset.cooldown);
                const action = document.querySelector('[data-action]').dataset.action;
                const runActionButton = document.getElementById('run-action-button');

                if (action === 'EXTRACT_ASTEROID') {
                    setTimeout(() => {
                        runActionButton.click();
                    }, isNaN(cooldown) ? 5000 : ((cooldown + 1) * 1000));
                }

                if (['NAVIGATE_TO_ASTEROID', 'REFUEL_SHIP', 'JETTISON_CARGO', 'SELL_CARGO', 'NAVIGATE_TO_DELIVERY', 'DELIVER_CARGO'].includes(action)) {
                    setTimeout(() => {
                        runActionButton.click();
                    }, 5000);
                }
            }

            const hundredth = (number) => {
                return Number(Number(number).toString()[0]);
            };

            const SIZE = 800;
            let RANGE;

            const ships = {{ ships|json_encode|raw }};
            const waypoints = {{ scannedWaypoints|json_encode|raw }};

            console.log(ships, waypoints);

            let maxX = 0;
            let maxY = 0;

            for (let i = 0; i < waypoints.length; ++i) {
                if (Math.abs(waypoints[i].x) > maxX) {
                    maxX = Math.abs(waypoints[i].x);
                }

                if (Math.abs(waypoints[i].y) > maxY) {
                    maxY = Math.abs(waypoints[i].y);
                }
            }

            RANGE = (hundredth(Math.max(maxX, maxY)) + 1) * 100 + 50;

            console.log(`maxX: ${maxX}, maxY: ${maxY}`);
            console.log(`range: ${RANGE}`);

            const mapCoordinateToPixel = (coordinate, min, max, size) => {
                return ((coordinate - min) / (max - min)) * size;
            };

            const mapCoordinatesToPixels = (x, y) => {
                return {
                    px: mapCoordinateToPixel(x, -RANGE, RANGE, SIZE),
                    py: mapCoordinateToPixel(y, -RANGE, RANGE, SIZE)
                };
            };

            const mapPixelToCoordinate = (pixel, min, max, size) => {
                return (pixel / size) * (max - min) + min;
            };

            const mapPixelsToCoordinates = (px, py) => {
                return {
                    x: Math.floor(mapPixelToCoordinate(px, -RANGE, RANGE, SIZE)),
                    y: Math.floor(mapPixelToCoordinate(py, -RANGE, RANGE, SIZE))
                };
            };

            const systemCanvas = document.getElementById('system');
            systemCanvas.width = SIZE;
            systemCanvas.style.width = `${SIZE}px`;
            systemCanvas.height = SIZE;
            systemCanvas.style.height = `${SIZE}px`;
            const context = systemCanvas.getContext('2d');

            context.fillStyle = 'white';
            context.fillRect(0, 0, 800, 800);

            {% if navigator|default %}
            const route = {{ navigator.route|json_encode|raw }};

            for (let i = 1; i < route.length; ++i) {
                let fromPosition = mapCoordinatesToPixels(route[i - 1].x, route[i - 1].y);
                let toPosition = mapCoordinatesToPixels(route[i].x, route[i].y);

                context.strokeStyle = 'black';
                context.beginPath();
                context.moveTo(fromPosition.px, fromPosition.py);
                context.lineTo(toPosition.px, toPosition.py);
                context.closePath();
                context.stroke();
            }
            {% endif %}

            let shipWaypoints = ships.map(ship => ship.nav.waypointSymbol);

            for (let i = 0; i < waypoints.length; ++i) {
                let position = mapCoordinatesToPixels(waypoints[i].x, waypoints[i].y);

                let radius = 2.5;
                let fillStyle = 'black';

                if (waypoints[i].exchange.includes('FUEL')) {
                    fillStyle = 'orange';
                }

                if (shipWaypoints.includes(waypoints[i].waypointSymbol)) {
                    radius = 5.0;
                    fillStyle = 'green';
                }

                context.fillStyle = fillStyle;

                {% if navigator|default %}
                if (waypoints[i].waypointSymbol === {{ navigator.to.symbol|json_encode|raw }}) {
                    radius = 5.0;
                }
                {% endif %}

                context.beginPath();
                context.arc(position.px, position.py, radius, 0, Math.PI * 2);
                context.closePath();
                context.fill();
            }

            let headquartersCoords = {x: {{ headquarters.x|raw }}, y: {{ headquarters.y|raw }}};
            let headquartersPosition = mapCoordinatesToPixels(headquartersCoords.x, headquartersCoords.y);

            context.fillStyle = 'red';
            context.beginPath();
            context.arc(headquartersPosition.px, headquartersPosition.py, 5, 0, Math.PI * 2);
            context.closePath();
            context.fill();

            const clickedWaypointElement = document.getElementById('clickedWaypoint');

            systemCanvas.addEventListener('mousedown', event => {
                let rect = systemCanvas.getBoundingClientRect();

                let position = {
                    px: Math.floor(event.clientX - rect.left),
                    py: Math.floor(event.clientY - rect.top)
                };

                let coordinates = mapPixelsToCoordinates(position.px, position.py);
                let search = [];

                for (let i = -5; i <= 5; ++i) {
                    for (let j = -5; j <= 5; ++j) {
                        search.push({x: coordinates.x + i, y: coordinates.y + j});
                    }
                }

                let matches = [];

                for (let i = 0; i < waypoints.length; ++i) {
                    for (let j = 0; j < search.length; j++) {
                        if (waypoints[i].x === search[j].x && waypoints[i].y === search[j].y) {
                            matches.push(waypoints[i]);
                            break;
                        }
                    }
                }

                let html = '';

                for (let i = 0; i < matches.length; ++i) {
                    html += `<div class="mb-3">`;
                    html += `Waypoint: ${matches[i].waypointSymbol}<br>`;
                    html += `Type: ${matches[i].type}<br>`;
                    html += `Traits:<br>`
                    html += `<ul class="mb-0">`;
                    for (let j = 0; j < matches[i].traits.length; j++) {
                        html += `<li>${matches[i].traits[j]}</li>`;
                    }
                    html += `</ul>`;
                    html += `Exchange:<br>`
                    html += `<ul class="mb-0">`;
                    for (let j = 0; j < matches[i].exchange.length; j++) {
                        html += `<li>${matches[i].exchange[j]}</li>`;
                    }
                    html += `</ul>`;
                    html += `</div>`;
                }

                clickedWaypointElement.innerHTML = html;
            });
        });
    </script>
{% endblock %}

{% block body %}
    <div class="my-5">
        <h3>Welcome back {{ agent.symbol }}</h3>

        <p class="mb-3">
            Next reset: {{ status.serverResets.next|date('d.m.Y H:i:s') }}<br>
            Credits: {{ agent.credits }}<br>
            Ranking: Top {{ ranking }}
        </p>

        <h4>Your System</h4>

        <div class="row row-cols-1 mb-3">
            <div class="col">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="card-text">
                            <span>Headquarters: {{ headquarters.symbol }}</span><br>
                            <span>Scanned waypoints: {{ scannedWaypoints|length }} / {{ system.waypoints|length }}</span>
                            <hr>
                            <div class="d-flex justify-content-between">
                                <div>
                                    <button class="btn btn-sm btn-primary" data-bs-toggle="collapse" data-bs-target="#system-map" aria-expanded="false" aria-controls="system-map">Show System</button>
                                </div>
                                <div id="system-map" class="collapse {# show #} flex-grow-1">
                                    <div class="d-flex justify-content-evenly">
                                        <canvas id="system" class="d-block mx-3"></canvas>
                                        <div class="flex-grow-1">
                                            <h4>Ship Controls</h4>
                                            <a class="btn btn-sm btn-primary me-2" href="{{ path('app.ship.refuel', {'shipSymbol': ships[0].symbol}) }}">Refuel</a>
                                            <a class="btn btn-sm btn-primary" href="{{ path('app.ship.repair', {'shipSymbol': ships[0].symbol}) }}">Repair</a>
                                            <hr>
                                            {% form_theme navigateForm 'bootstrap_5_layout.html.twig' %}
                                            {{ form(navigateForm) }}
                                            <hr>
                                            <div id="clickedWaypoint"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <h4>Your Ships</h4>

        <div class="row row-cols-1 row-cols-lg-2 g-3 mb-3">
            {% for ship in ships %}
                <div class="col">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">{{ ship.symbol }}</h5>
                            <div class="card-text">
                                <span>Crew: {{ ship.crew.current }} / {{ ship.crew.capacity }}</span><br>
                                <button class="btn btn-sm btn-primary mt-2 me-2" data-bs-toggle="collapse" data-bs-target="#modules-{{ loop.index0 }}" aria-expanded="false" aria-controls="modules-{{ loop.index0 }}">Modules</button>
                                <button class="btn btn-sm btn-primary mt-2" data-bs-toggle="collapse" data-bs-target="#mounts-{{ loop.index0 }}" aria-expanded="false" aria-controls="mounts-{{ loop.index0 }}">Mounts</button>
                                <ul id="modules-{{ loop.index0 }}" class="collapse mt-2 mb-0">
                                    {% for module in ship.modules %}
                                        <li>{{ module.symbol }}</li>
                                    {% endfor %}
                                </ul>
                                <ul id="mounts-{{ loop.index0 }}" class="collapse mt-2 mb-0">
                                    {% for mount in ship.mounts %}
                                        <li>{{ mount.symbol }}</li>
                                    {% endfor %}
                                </ul>
                                <hr>
                                <span>Status: {{ ship.nav.status }}</span><br>
                                {% if ship.nav.status == 'IN_TRANSIT' %}
                                    <span>Arrival: {{ ship.nav.route.arrival|date('d.m.Y H:i:s') }}</span><br>
                                {% endif %}
                                <span>
                                    Flight mode:
                                    <a class="btn btn-sm {% if ship.nav.flightMode == 'CRUISE' %}btn-success{% else %}btn-primary{% endif %} py-0 me-2" href="{{ path('app.ship.nav', {'shipSymbol': ship.symbol, 'flightMode': 'CRUISE'}) }}">CRUISE</a>
                                    <a class="btn btn-sm {% if ship.nav.flightMode == 'BURN' %}btn-success{% else %}btn-primary{% endif %} py-0 me-2" href="{{ path('app.ship.nav', {'shipSymbol': ship.symbol, 'flightMode': 'BURN'}) }}">BURN</a>
                                    <a class="btn btn-sm {% if ship.nav.flightMode == 'DRIFT' %}btn-success{% else %}btn-primary{% endif %} py-0 me-2" href="{{ path('app.ship.nav', {'shipSymbol': ship.symbol, 'flightMode': 'DRIFT'}) }}">DRIFT</a>
                                    <a class="btn btn-sm {% if ship.nav.flightMode == 'STEALTH' %}btn-success{% else %}btn-primary{% endif %} py-0" href="{{ path('app.ship.nav', {'shipSymbol': ship.symbol, 'flightMode': 'STEALTH'}) }}">STEALTH</a>
                                </span><br>
                                <span>Fuel level: {{ ship.fuel.current }} / {{ ship.fuel.capacity }}</span><br>
                                <span>Location: {{ ship.nav.waypointSymbol }}</span><br>
                                {% if ship.cooldown.expiration|default %}
                                    <span data-cooldown="{{ ship.cooldown.remainingSeconds }}">Cooldown: {{ ship.cooldown.expiration|date('d.m.Y H:i:s') }} ({{ ship.cooldown.remainingSeconds }}s)</span><br>
                                {% endif %}
                                <hr>
                                <span>Frame condition: {{ ship.frame.condition|round(3, 'floor') }}</span><br>
                                <span>Reactor condition: {{ ship.reactor.condition|round(3, 'floor') }}</span><br>
                                <span>Engine condition: {{ ship.engine.condition|round(3, 'floor') }}</span>
                                <hr>
                                <span>Cargo: {{ ship.cargo.units }} / {{ ship.cargo.capacity }}</span><br>
                                <ul class="mb-0">
                                    {% for item in ship.cargo.inventory %}
                                        <li>{{ item.symbol }} ({{ item.units }})</li>
                                    {% endfor %}
                                </ul>
                                <hr>
                                <a class="btn btn-sm btn-primary" href="{{ path('app.ship.negotiate', {'shipSymbol': ship.symbol}) }}">Negotiate Contract</a>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>

        <h4>Your Contracts</h4>

        <div class="row row-cols-1 row-cols-lg-2 g-3 mb-3">
            {% for contract in contracts %}
                <div class="col">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">{{ contract.type }}</h5>
                            <div class="card-text">
                                <span>Terms: {{ contract.getTermsDescription }}</span><br>
                                <span>Reward: {{ contract.getRewardDescription }}</span><br>
                                {% if contract.accepted %}
                                    <span>Deadline: {{ contract.terms.deadline|date('d.m.Y H:i:s') }}</span><br>
                                    <div class="d-flex mt-2">
                                        <button class="btn btn-sm btn-primary me-2" disabled>{% if not contract.fulfilled %}Contract is underway{% else %}Fulfilled{% endif %}</button>
                                        {# {% if not contract.fulfilled %}
                                            {% set acceptedContract = acceptedContracts|find(c => c.contractId == contract.id) %}
                                            <a id="run-action-button" class="btn btn-sm btn-primary" href="{{ path('app.contract.run', {'contractId': contract.id}) }}">Run action</a>
                                            {% if acceptedContract.data.action in ['NAVIGATE_TO_ASTEROID', 'REFUEL_SHIP', 'EXTRACT_ASTEROID', 'JETTISON_CARGO', 'SELL_CARGO', 'NAVIGATE_TO_DELIVERY', 'DELIVER_CARGO'] %}
                                                <div class="form-check align-self-center ms-auto">
                                                    <input class="form-check-input" type="checkbox" id="automation">
                                                    <label class="form-check-label" for="automation">Enable automation</label>
                                                </div>
                                            {% endif %}
                                        {% endif %} #}
                                    </div>
                                {% else %}
                                    <span>Expires after: {{ contract.deadlineToAccept|date('d.m.Y H:i:s') }}</span><br>
                                    <a class="btn btn-sm btn-primary mt-2" href="{{ path('app.contract.accept', {'contractId': contract.id}) }}">Accept contract</a>
                                {% endif %}
                                {% if contract.accepted and not contract.fulfilled %}
                                    {% set acceptedContract = acceptedContracts|find(c => c.contractId == contract.id) %}
                                    <hr>
                                    <span>Ship: {{ acceptedContract.shipSymbol }}</span><br>
                                    {# <span data-action="{{ acceptedContract.data.action }}">Action: {{ acceptedContract.data.action }}</span><br> #}
                                    {% if acceptedContract.data.asteroidSymbol|default %}
                                        <span>Asteroid: {{ acceptedContract.data.asteroidSymbol }}</span><br>
                                    {% endif %}
                                    {% if acceptedContract.data.arrival|default %}
                                        <span>Arrival: {{ acceptedContract.data.arrival|date('d.m.Y H:i:s') }}</span><br>
                                    {% endif %}
                                    {% for message in app.flashes('info') %}
                                        <span>{{ message }}</span><br>
                                    {% endfor %}
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>

        <a class="btn btn-primary" href="{{ path('app.auth.logout') }}">Logout</a>
    </div>
{% endblock %}
